// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShelterResident is an object representing the database table.
type ShelterResident struct {
	ID           int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShelterID    int    `boil:"shelter_id" json:"shelter_id" toml:"shelter_id" yaml:"shelter_id"`
	ResidentName string `boil:"resident_name" json:"resident_name" toml:"resident_name" yaml:"resident_name"`

	R *shelterResidentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shelterResidentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShelterResidentColumns = struct {
	ID           string
	ShelterID    string
	ResidentName string
}{
	ID:           "id",
	ShelterID:    "shelter_id",
	ResidentName: "resident_name",
}

var ShelterResidentTableColumns = struct {
	ID           string
	ShelterID    string
	ResidentName string
}{
	ID:           "shelter_residents.id",
	ShelterID:    "shelter_residents.shelter_id",
	ResidentName: "shelter_residents.resident_name",
}

// Generated where

var ShelterResidentWhere = struct {
	ID           whereHelperint
	ShelterID    whereHelperint
	ResidentName whereHelperstring
}{
	ID:           whereHelperint{field: "\"shelter_residents\".\"id\""},
	ShelterID:    whereHelperint{field: "\"shelter_residents\".\"shelter_id\""},
	ResidentName: whereHelperstring{field: "\"shelter_residents\".\"resident_name\""},
}

// ShelterResidentRels is where relationship names are stored.
var ShelterResidentRels = struct {
	Shelter string
}{
	Shelter: "Shelter",
}

// shelterResidentR is where relationships are stored.
type shelterResidentR struct {
	Shelter *Shelter `boil:"Shelter" json:"Shelter" toml:"Shelter" yaml:"Shelter"`
}

// NewStruct creates a new relationship struct
func (*shelterResidentR) NewStruct() *shelterResidentR {
	return &shelterResidentR{}
}

func (r *shelterResidentR) GetShelter() *Shelter {
	if r == nil {
		return nil
	}
	return r.Shelter
}

// shelterResidentL is where Load methods for each relationship are stored.
type shelterResidentL struct{}

var (
	shelterResidentAllColumns            = []string{"id", "shelter_id", "resident_name"}
	shelterResidentColumnsWithoutDefault = []string{"shelter_id", "resident_name"}
	shelterResidentColumnsWithDefault    = []string{"id"}
	shelterResidentPrimaryKeyColumns     = []string{"id"}
	shelterResidentGeneratedColumns      = []string{}
)

type (
	// ShelterResidentSlice is an alias for a slice of pointers to ShelterResident.
	// This should almost always be used instead of []ShelterResident.
	ShelterResidentSlice []*ShelterResident
	// ShelterResidentHook is the signature for custom ShelterResident hook methods
	ShelterResidentHook func(context.Context, boil.ContextExecutor, *ShelterResident) error

	shelterResidentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shelterResidentType                 = reflect.TypeOf(&ShelterResident{})
	shelterResidentMapping              = queries.MakeStructMapping(shelterResidentType)
	shelterResidentPrimaryKeyMapping, _ = queries.BindMapping(shelterResidentType, shelterResidentMapping, shelterResidentPrimaryKeyColumns)
	shelterResidentInsertCacheMut       sync.RWMutex
	shelterResidentInsertCache          = make(map[string]insertCache)
	shelterResidentUpdateCacheMut       sync.RWMutex
	shelterResidentUpdateCache          = make(map[string]updateCache)
	shelterResidentUpsertCacheMut       sync.RWMutex
	shelterResidentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shelterResidentAfterSelectMu sync.Mutex
var shelterResidentAfterSelectHooks []ShelterResidentHook

var shelterResidentBeforeInsertMu sync.Mutex
var shelterResidentBeforeInsertHooks []ShelterResidentHook
var shelterResidentAfterInsertMu sync.Mutex
var shelterResidentAfterInsertHooks []ShelterResidentHook

var shelterResidentBeforeUpdateMu sync.Mutex
var shelterResidentBeforeUpdateHooks []ShelterResidentHook
var shelterResidentAfterUpdateMu sync.Mutex
var shelterResidentAfterUpdateHooks []ShelterResidentHook

var shelterResidentBeforeDeleteMu sync.Mutex
var shelterResidentBeforeDeleteHooks []ShelterResidentHook
var shelterResidentAfterDeleteMu sync.Mutex
var shelterResidentAfterDeleteHooks []ShelterResidentHook

var shelterResidentBeforeUpsertMu sync.Mutex
var shelterResidentBeforeUpsertHooks []ShelterResidentHook
var shelterResidentAfterUpsertMu sync.Mutex
var shelterResidentAfterUpsertHooks []ShelterResidentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShelterResident) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShelterResident) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShelterResident) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShelterResident) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShelterResident) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShelterResident) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShelterResident) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShelterResident) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShelterResident) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterResidentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShelterResidentHook registers your hook function for all future operations.
func AddShelterResidentHook(hookPoint boil.HookPoint, shelterResidentHook ShelterResidentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shelterResidentAfterSelectMu.Lock()
		shelterResidentAfterSelectHooks = append(shelterResidentAfterSelectHooks, shelterResidentHook)
		shelterResidentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shelterResidentBeforeInsertMu.Lock()
		shelterResidentBeforeInsertHooks = append(shelterResidentBeforeInsertHooks, shelterResidentHook)
		shelterResidentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shelterResidentAfterInsertMu.Lock()
		shelterResidentAfterInsertHooks = append(shelterResidentAfterInsertHooks, shelterResidentHook)
		shelterResidentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shelterResidentBeforeUpdateMu.Lock()
		shelterResidentBeforeUpdateHooks = append(shelterResidentBeforeUpdateHooks, shelterResidentHook)
		shelterResidentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shelterResidentAfterUpdateMu.Lock()
		shelterResidentAfterUpdateHooks = append(shelterResidentAfterUpdateHooks, shelterResidentHook)
		shelterResidentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shelterResidentBeforeDeleteMu.Lock()
		shelterResidentBeforeDeleteHooks = append(shelterResidentBeforeDeleteHooks, shelterResidentHook)
		shelterResidentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shelterResidentAfterDeleteMu.Lock()
		shelterResidentAfterDeleteHooks = append(shelterResidentAfterDeleteHooks, shelterResidentHook)
		shelterResidentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shelterResidentBeforeUpsertMu.Lock()
		shelterResidentBeforeUpsertHooks = append(shelterResidentBeforeUpsertHooks, shelterResidentHook)
		shelterResidentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shelterResidentAfterUpsertMu.Lock()
		shelterResidentAfterUpsertHooks = append(shelterResidentAfterUpsertHooks, shelterResidentHook)
		shelterResidentAfterUpsertMu.Unlock()
	}
}

// One returns a single shelterResident record from the query.
func (q shelterResidentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShelterResident, error) {
	o := &ShelterResident{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shelter_residents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShelterResident records from the query.
func (q shelterResidentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShelterResidentSlice, error) {
	var o []*ShelterResident

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShelterResident slice")
	}

	if len(shelterResidentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShelterResident records in the query.
func (q shelterResidentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shelter_residents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shelterResidentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shelter_residents exists")
	}

	return count > 0, nil
}

// Shelter pointed to by the foreign key.
func (o *ShelterResident) Shelter(mods ...qm.QueryMod) shelterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShelterID),
	}

	queryMods = append(queryMods, mods...)

	return Shelters(queryMods...)
}

// LoadShelter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shelterResidentL) LoadShelter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShelterResident interface{}, mods queries.Applicator) error {
	var slice []*ShelterResident
	var object *ShelterResident

	if singular {
		var ok bool
		object, ok = maybeShelterResident.(*ShelterResident)
		if !ok {
			object = new(ShelterResident)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShelterResident)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShelterResident))
			}
		}
	} else {
		s, ok := maybeShelterResident.(*[]*ShelterResident)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShelterResident)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShelterResident))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shelterResidentR{}
		}
		args[object.ShelterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shelterResidentR{}
			}

			args[obj.ShelterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shelter`),
		qm.WhereIn(`shelter.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shelter")
	}

	var resultSlice []*Shelter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shelter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shelter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shelter")
	}

	if len(shelterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shelter = foreign
		if foreign.R == nil {
			foreign.R = &shelterR{}
		}
		foreign.R.ShelterResidents = append(foreign.R.ShelterResidents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShelterID == foreign.ID {
				local.R.Shelter = foreign
				if foreign.R == nil {
					foreign.R = &shelterR{}
				}
				foreign.R.ShelterResidents = append(foreign.R.ShelterResidents, local)
				break
			}
		}
	}

	return nil
}

// SetShelter of the shelterResident to the related item.
// Sets o.R.Shelter to related.
// Adds o to related.R.ShelterResidents.
func (o *ShelterResident) SetShelter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shelter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shelter_residents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shelter_id"}),
		strmangle.WhereClause("\"", "\"", 2, shelterResidentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShelterID = related.ID
	if o.R == nil {
		o.R = &shelterResidentR{
			Shelter: related,
		}
	} else {
		o.R.Shelter = related
	}

	if related.R == nil {
		related.R = &shelterR{
			ShelterResidents: ShelterResidentSlice{o},
		}
	} else {
		related.R.ShelterResidents = append(related.R.ShelterResidents, o)
	}

	return nil
}

// ShelterResidents retrieves all the records using an executor.
func ShelterResidents(mods ...qm.QueryMod) shelterResidentQuery {
	mods = append(mods, qm.From("\"shelter_residents\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shelter_residents\".*"})
	}

	return shelterResidentQuery{q}
}

// FindShelterResident retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShelterResident(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ShelterResident, error) {
	shelterResidentObj := &ShelterResident{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shelter_residents\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shelterResidentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shelter_residents")
	}

	if err = shelterResidentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shelterResidentObj, err
	}

	return shelterResidentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShelterResident) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shelter_residents provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shelterResidentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shelterResidentInsertCacheMut.RLock()
	cache, cached := shelterResidentInsertCache[key]
	shelterResidentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shelterResidentAllColumns,
			shelterResidentColumnsWithDefault,
			shelterResidentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shelterResidentType, shelterResidentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shelterResidentType, shelterResidentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shelter_residents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shelter_residents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shelter_residents")
	}

	if !cached {
		shelterResidentInsertCacheMut.Lock()
		shelterResidentInsertCache[key] = cache
		shelterResidentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShelterResident.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShelterResident) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shelterResidentUpdateCacheMut.RLock()
	cache, cached := shelterResidentUpdateCache[key]
	shelterResidentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shelterResidentAllColumns,
			shelterResidentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shelter_residents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shelter_residents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shelterResidentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shelterResidentType, shelterResidentMapping, append(wl, shelterResidentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shelter_residents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shelter_residents")
	}

	if !cached {
		shelterResidentUpdateCacheMut.Lock()
		shelterResidentUpdateCache[key] = cache
		shelterResidentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shelterResidentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shelter_residents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shelter_residents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShelterResidentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterResidentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shelter_residents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shelterResidentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shelterResident slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shelterResident")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShelterResident) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no shelter_residents provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shelterResidentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shelterResidentUpsertCacheMut.RLock()
	cache, cached := shelterResidentUpsertCache[key]
	shelterResidentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shelterResidentAllColumns,
			shelterResidentColumnsWithDefault,
			shelterResidentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shelterResidentAllColumns,
			shelterResidentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shelter_residents, could not build update column list")
		}

		ret := strmangle.SetComplement(shelterResidentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shelterResidentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert shelter_residents, could not build conflict column list")
			}

			conflict = make([]string, len(shelterResidentPrimaryKeyColumns))
			copy(conflict, shelterResidentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shelter_residents\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shelterResidentType, shelterResidentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shelterResidentType, shelterResidentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shelter_residents")
	}

	if !cached {
		shelterResidentUpsertCacheMut.Lock()
		shelterResidentUpsertCache[key] = cache
		shelterResidentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShelterResident record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShelterResident) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShelterResident provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shelterResidentPrimaryKeyMapping)
	sql := "DELETE FROM \"shelter_residents\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shelter_residents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shelter_residents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shelterResidentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shelterResidentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shelter_residents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shelter_residents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShelterResidentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shelterResidentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterResidentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shelter_residents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shelterResidentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shelterResident slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shelter_residents")
	}

	if len(shelterResidentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShelterResident) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShelterResident(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShelterResidentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShelterResidentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterResidentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shelter_residents\".* FROM \"shelter_residents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shelterResidentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShelterResidentSlice")
	}

	*o = slice

	return nil
}

// ShelterResidentExists checks if the ShelterResident row exists.
func ShelterResidentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shelter_residents\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shelter_residents exists")
	}

	return exists, nil
}

// Exists checks if the ShelterResident row exists.
func (o *ShelterResident) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShelterResidentExists(ctx, exec, o.ID)
}
