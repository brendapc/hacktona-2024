// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Shelter is an object representing the database table.
type Shelter struct {
	ID                   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description          string `boil:"description" json:"description" toml:"description" yaml:"description"`
	Address              string `boil:"address" json:"address" toml:"address" yaml:"address"`
	Phone                string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Email                string `boil:"email" json:"email" toml:"email" yaml:"email"`
	PasswordHash         string `boil:"password_hash" json:"password_hash" toml:"password_hash" yaml:"password_hash"`
	Capacity             int    `boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	CurrentOccupancy     int    `boil:"current_occupancy" json:"current_occupancy" toml:"current_occupancy" yaml:"current_occupancy"`
	CapacityPets         int    `boil:"capacity_pets" json:"capacity_pets" toml:"capacity_pets" yaml:"capacity_pets"`
	CurrentOccupancyPets int    `boil:"current_occupancy_pets" json:"current_occupancy_pets" toml:"current_occupancy_pets" yaml:"current_occupancy_pets"`
	Acessibility         bool   `boil:"acessibility" json:"acessibility" toml:"acessibility" yaml:"acessibility"`

	R *shelterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shelterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShelterColumns = struct {
	ID                   string
	Name                 string
	Description          string
	Address              string
	Phone                string
	Email                string
	PasswordHash         string
	Capacity             string
	CurrentOccupancy     string
	CapacityPets         string
	CurrentOccupancyPets string
	Acessibility         string
}{
	ID:                   "id",
	Name:                 "name",
	Description:          "description",
	Address:              "address",
	Phone:                "phone",
	Email:                "email",
	PasswordHash:         "password_hash",
	Capacity:             "capacity",
	CurrentOccupancy:     "current_occupancy",
	CapacityPets:         "capacity_pets",
	CurrentOccupancyPets: "current_occupancy_pets",
	Acessibility:         "acessibility",
}

var ShelterTableColumns = struct {
	ID                   string
	Name                 string
	Description          string
	Address              string
	Phone                string
	Email                string
	PasswordHash         string
	Capacity             string
	CurrentOccupancy     string
	CapacityPets         string
	CurrentOccupancyPets string
	Acessibility         string
}{
	ID:                   "shelter.id",
	Name:                 "shelter.name",
	Description:          "shelter.description",
	Address:              "shelter.address",
	Phone:                "shelter.phone",
	Email:                "shelter.email",
	PasswordHash:         "shelter.password_hash",
	Capacity:             "shelter.capacity",
	CurrentOccupancy:     "shelter.current_occupancy",
	CapacityPets:         "shelter.capacity_pets",
	CurrentOccupancyPets: "shelter.current_occupancy_pets",
	Acessibility:         "shelter.acessibility",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ShelterWhere = struct {
	ID                   whereHelperint
	Name                 whereHelperstring
	Description          whereHelperstring
	Address              whereHelperstring
	Phone                whereHelperstring
	Email                whereHelperstring
	PasswordHash         whereHelperstring
	Capacity             whereHelperint
	CurrentOccupancy     whereHelperint
	CapacityPets         whereHelperint
	CurrentOccupancyPets whereHelperint
	Acessibility         whereHelperbool
}{
	ID:                   whereHelperint{field: "\"shelter\".\"id\""},
	Name:                 whereHelperstring{field: "\"shelter\".\"name\""},
	Description:          whereHelperstring{field: "\"shelter\".\"description\""},
	Address:              whereHelperstring{field: "\"shelter\".\"address\""},
	Phone:                whereHelperstring{field: "\"shelter\".\"phone\""},
	Email:                whereHelperstring{field: "\"shelter\".\"email\""},
	PasswordHash:         whereHelperstring{field: "\"shelter\".\"password_hash\""},
	Capacity:             whereHelperint{field: "\"shelter\".\"capacity\""},
	CurrentOccupancy:     whereHelperint{field: "\"shelter\".\"current_occupancy\""},
	CapacityPets:         whereHelperint{field: "\"shelter\".\"capacity_pets\""},
	CurrentOccupancyPets: whereHelperint{field: "\"shelter\".\"current_occupancy_pets\""},
	Acessibility:         whereHelperbool{field: "\"shelter\".\"acessibility\""},
}

// ShelterRels is where relationship names are stored.
var ShelterRels = struct {
	ShelterNeeds     string
	ShelterResidents string
}{
	ShelterNeeds:     "ShelterNeeds",
	ShelterResidents: "ShelterResidents",
}

// shelterR is where relationships are stored.
type shelterR struct {
	ShelterNeeds     ShelterNeedSlice     `boil:"ShelterNeeds" json:"ShelterNeeds" toml:"ShelterNeeds" yaml:"ShelterNeeds"`
	ShelterResidents ShelterResidentSlice `boil:"ShelterResidents" json:"ShelterResidents" toml:"ShelterResidents" yaml:"ShelterResidents"`
}

// NewStruct creates a new relationship struct
func (*shelterR) NewStruct() *shelterR {
	return &shelterR{}
}

func (r *shelterR) GetShelterNeeds() ShelterNeedSlice {
	if r == nil {
		return nil
	}
	return r.ShelterNeeds
}

func (r *shelterR) GetShelterResidents() ShelterResidentSlice {
	if r == nil {
		return nil
	}
	return r.ShelterResidents
}

// shelterL is where Load methods for each relationship are stored.
type shelterL struct{}

var (
	shelterAllColumns            = []string{"id", "name", "description", "address", "phone", "email", "password_hash", "capacity", "current_occupancy", "capacity_pets", "current_occupancy_pets", "acessibility"}
	shelterColumnsWithoutDefault = []string{"name", "description", "address", "phone", "email", "password_hash", "capacity", "current_occupancy", "capacity_pets", "current_occupancy_pets", "acessibility"}
	shelterColumnsWithDefault    = []string{"id"}
	shelterPrimaryKeyColumns     = []string{"id"}
	shelterGeneratedColumns      = []string{}
)

type (
	// ShelterSlice is an alias for a slice of pointers to Shelter.
	// This should almost always be used instead of []Shelter.
	ShelterSlice []*Shelter
	// ShelterHook is the signature for custom Shelter hook methods
	ShelterHook func(context.Context, boil.ContextExecutor, *Shelter) error

	shelterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shelterType                 = reflect.TypeOf(&Shelter{})
	shelterMapping              = queries.MakeStructMapping(shelterType)
	shelterPrimaryKeyMapping, _ = queries.BindMapping(shelterType, shelterMapping, shelterPrimaryKeyColumns)
	shelterInsertCacheMut       sync.RWMutex
	shelterInsertCache          = make(map[string]insertCache)
	shelterUpdateCacheMut       sync.RWMutex
	shelterUpdateCache          = make(map[string]updateCache)
	shelterUpsertCacheMut       sync.RWMutex
	shelterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shelterAfterSelectMu sync.Mutex
var shelterAfterSelectHooks []ShelterHook

var shelterBeforeInsertMu sync.Mutex
var shelterBeforeInsertHooks []ShelterHook
var shelterAfterInsertMu sync.Mutex
var shelterAfterInsertHooks []ShelterHook

var shelterBeforeUpdateMu sync.Mutex
var shelterBeforeUpdateHooks []ShelterHook
var shelterAfterUpdateMu sync.Mutex
var shelterAfterUpdateHooks []ShelterHook

var shelterBeforeDeleteMu sync.Mutex
var shelterBeforeDeleteHooks []ShelterHook
var shelterAfterDeleteMu sync.Mutex
var shelterAfterDeleteHooks []ShelterHook

var shelterBeforeUpsertMu sync.Mutex
var shelterBeforeUpsertHooks []ShelterHook
var shelterAfterUpsertMu sync.Mutex
var shelterAfterUpsertHooks []ShelterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Shelter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Shelter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Shelter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Shelter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Shelter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Shelter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Shelter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Shelter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Shelter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shelterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShelterHook registers your hook function for all future operations.
func AddShelterHook(hookPoint boil.HookPoint, shelterHook ShelterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shelterAfterSelectMu.Lock()
		shelterAfterSelectHooks = append(shelterAfterSelectHooks, shelterHook)
		shelterAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shelterBeforeInsertMu.Lock()
		shelterBeforeInsertHooks = append(shelterBeforeInsertHooks, shelterHook)
		shelterBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shelterAfterInsertMu.Lock()
		shelterAfterInsertHooks = append(shelterAfterInsertHooks, shelterHook)
		shelterAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shelterBeforeUpdateMu.Lock()
		shelterBeforeUpdateHooks = append(shelterBeforeUpdateHooks, shelterHook)
		shelterBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shelterAfterUpdateMu.Lock()
		shelterAfterUpdateHooks = append(shelterAfterUpdateHooks, shelterHook)
		shelterAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shelterBeforeDeleteMu.Lock()
		shelterBeforeDeleteHooks = append(shelterBeforeDeleteHooks, shelterHook)
		shelterBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shelterAfterDeleteMu.Lock()
		shelterAfterDeleteHooks = append(shelterAfterDeleteHooks, shelterHook)
		shelterAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shelterBeforeUpsertMu.Lock()
		shelterBeforeUpsertHooks = append(shelterBeforeUpsertHooks, shelterHook)
		shelterBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shelterAfterUpsertMu.Lock()
		shelterAfterUpsertHooks = append(shelterAfterUpsertHooks, shelterHook)
		shelterAfterUpsertMu.Unlock()
	}
}

// One returns a single shelter record from the query.
func (q shelterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Shelter, error) {
	o := &Shelter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shelter")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Shelter records from the query.
func (q shelterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShelterSlice, error) {
	var o []*Shelter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Shelter slice")
	}

	if len(shelterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Shelter records in the query.
func (q shelterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shelter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shelterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shelter exists")
	}

	return count > 0, nil
}

// ShelterNeeds retrieves all the shelter_need's ShelterNeeds with an executor.
func (o *Shelter) ShelterNeeds(mods ...qm.QueryMod) shelterNeedQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shelter_needs\".\"shelter_id\"=?", o.ID),
	)

	return ShelterNeeds(queryMods...)
}

// ShelterResidents retrieves all the shelter_resident's ShelterResidents with an executor.
func (o *Shelter) ShelterResidents(mods ...qm.QueryMod) shelterResidentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shelter_residents\".\"shelter_id\"=?", o.ID),
	)

	return ShelterResidents(queryMods...)
}

// LoadShelterNeeds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shelterL) LoadShelterNeeds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShelter interface{}, mods queries.Applicator) error {
	var slice []*Shelter
	var object *Shelter

	if singular {
		var ok bool
		object, ok = maybeShelter.(*Shelter)
		if !ok {
			object = new(Shelter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShelter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShelter))
			}
		}
	} else {
		s, ok := maybeShelter.(*[]*Shelter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShelter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShelter))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shelterR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shelterR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shelter_needs`),
		qm.WhereIn(`shelter_needs.shelter_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shelter_needs")
	}

	var resultSlice []*ShelterNeed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shelter_needs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shelter_needs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shelter_needs")
	}

	if len(shelterNeedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShelterNeeds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shelterNeedR{}
			}
			foreign.R.Shelter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShelterID {
				local.R.ShelterNeeds = append(local.R.ShelterNeeds, foreign)
				if foreign.R == nil {
					foreign.R = &shelterNeedR{}
				}
				foreign.R.Shelter = local
				break
			}
		}
	}

	return nil
}

// LoadShelterResidents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shelterL) LoadShelterResidents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShelter interface{}, mods queries.Applicator) error {
	var slice []*Shelter
	var object *Shelter

	if singular {
		var ok bool
		object, ok = maybeShelter.(*Shelter)
		if !ok {
			object = new(Shelter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShelter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShelter))
			}
		}
	} else {
		s, ok := maybeShelter.(*[]*Shelter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShelter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShelter))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shelterR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shelterR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shelter_residents`),
		qm.WhereIn(`shelter_residents.shelter_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shelter_residents")
	}

	var resultSlice []*ShelterResident
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shelter_residents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shelter_residents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shelter_residents")
	}

	if len(shelterResidentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShelterResidents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shelterResidentR{}
			}
			foreign.R.Shelter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShelterID {
				local.R.ShelterResidents = append(local.R.ShelterResidents, foreign)
				if foreign.R == nil {
					foreign.R = &shelterResidentR{}
				}
				foreign.R.Shelter = local
				break
			}
		}
	}

	return nil
}

// AddShelterNeeds adds the given related objects to the existing relationships
// of the shelter, optionally inserting them as new records.
// Appends related to o.R.ShelterNeeds.
// Sets related.R.Shelter appropriately.
func (o *Shelter) AddShelterNeeds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShelterNeed) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShelterID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shelter_needs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shelter_id"}),
				strmangle.WhereClause("\"", "\"", 2, shelterNeedPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShelterID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shelterR{
			ShelterNeeds: related,
		}
	} else {
		o.R.ShelterNeeds = append(o.R.ShelterNeeds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shelterNeedR{
				Shelter: o,
			}
		} else {
			rel.R.Shelter = o
		}
	}
	return nil
}

// AddShelterResidents adds the given related objects to the existing relationships
// of the shelter, optionally inserting them as new records.
// Appends related to o.R.ShelterResidents.
// Sets related.R.Shelter appropriately.
func (o *Shelter) AddShelterResidents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShelterResident) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShelterID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shelter_residents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shelter_id"}),
				strmangle.WhereClause("\"", "\"", 2, shelterResidentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShelterID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shelterR{
			ShelterResidents: related,
		}
	} else {
		o.R.ShelterResidents = append(o.R.ShelterResidents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shelterResidentR{
				Shelter: o,
			}
		} else {
			rel.R.Shelter = o
		}
	}
	return nil
}

// Shelters retrieves all the records using an executor.
func Shelters(mods ...qm.QueryMod) shelterQuery {
	mods = append(mods, qm.From("\"shelter\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shelter\".*"})
	}

	return shelterQuery{q}
}

// FindShelter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShelter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Shelter, error) {
	shelterObj := &Shelter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shelter\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shelterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shelter")
	}

	if err = shelterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shelterObj, err
	}

	return shelterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Shelter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shelter provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shelterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shelterInsertCacheMut.RLock()
	cache, cached := shelterInsertCache[key]
	shelterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shelterAllColumns,
			shelterColumnsWithDefault,
			shelterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shelterType, shelterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shelterType, shelterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shelter\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shelter\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shelter")
	}

	if !cached {
		shelterInsertCacheMut.Lock()
		shelterInsertCache[key] = cache
		shelterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Shelter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Shelter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shelterUpdateCacheMut.RLock()
	cache, cached := shelterUpdateCache[key]
	shelterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shelterAllColumns,
			shelterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shelter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shelter\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shelterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shelterType, shelterMapping, append(wl, shelterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shelter row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shelter")
	}

	if !cached {
		shelterUpdateCacheMut.Lock()
		shelterUpdateCache[key] = cache
		shelterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shelterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shelter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shelter")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShelterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shelter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shelterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shelter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shelter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Shelter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no shelter provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shelterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shelterUpsertCacheMut.RLock()
	cache, cached := shelterUpsertCache[key]
	shelterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shelterAllColumns,
			shelterColumnsWithDefault,
			shelterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shelterAllColumns,
			shelterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shelter, could not build update column list")
		}

		ret := strmangle.SetComplement(shelterAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shelterPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert shelter, could not build conflict column list")
			}

			conflict = make([]string, len(shelterPrimaryKeyColumns))
			copy(conflict, shelterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shelter\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shelterType, shelterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shelterType, shelterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shelter")
	}

	if !cached {
		shelterUpsertCacheMut.Lock()
		shelterUpsertCache[key] = cache
		shelterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Shelter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Shelter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Shelter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shelterPrimaryKeyMapping)
	sql := "DELETE FROM \"shelter\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shelter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shelter")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shelterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shelterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shelter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shelter")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShelterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shelterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shelter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shelterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shelter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shelter")
	}

	if len(shelterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Shelter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShelter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShelterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShelterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shelterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shelter\".* FROM \"shelter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shelterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShelterSlice")
	}

	*o = slice

	return nil
}

// ShelterExists checks if the Shelter row exists.
func ShelterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shelter\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shelter exists")
	}

	return exists, nil
}

// Exists checks if the Shelter row exists.
func (o *Shelter) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShelterExists(ctx, exec, o.ID)
}
