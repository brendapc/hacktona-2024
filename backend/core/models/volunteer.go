// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Volunteer is an object representing the database table.
type Volunteer struct {
	ID           int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email        string `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone        string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	PasswordHash string `boil:"password_hash" json:"password_hash" toml:"password_hash" yaml:"password_hash"`
	Type         string `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *volunteerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L volunteerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VolunteerColumns = struct {
	ID           string
	Name         string
	Email        string
	Phone        string
	PasswordHash string
	Type         string
}{
	ID:           "id",
	Name:         "name",
	Email:        "email",
	Phone:        "phone",
	PasswordHash: "password_hash",
	Type:         "type",
}

var VolunteerTableColumns = struct {
	ID           string
	Name         string
	Email        string
	Phone        string
	PasswordHash string
	Type         string
}{
	ID:           "volunteer.id",
	Name:         "volunteer.name",
	Email:        "volunteer.email",
	Phone:        "volunteer.phone",
	PasswordHash: "volunteer.password_hash",
	Type:         "volunteer.type",
}

// Generated where

var VolunteerWhere = struct {
	ID           whereHelperint
	Name         whereHelperstring
	Email        whereHelperstring
	Phone        whereHelperstring
	PasswordHash whereHelperstring
	Type         whereHelperstring
}{
	ID:           whereHelperint{field: "\"volunteer\".\"id\""},
	Name:         whereHelperstring{field: "\"volunteer\".\"name\""},
	Email:        whereHelperstring{field: "\"volunteer\".\"email\""},
	Phone:        whereHelperstring{field: "\"volunteer\".\"phone\""},
	PasswordHash: whereHelperstring{field: "\"volunteer\".\"password_hash\""},
	Type:         whereHelperstring{field: "\"volunteer\".\"type\""},
}

// VolunteerRels is where relationship names are stored.
var VolunteerRels = struct {
}{}

// volunteerR is where relationships are stored.
type volunteerR struct {
}

// NewStruct creates a new relationship struct
func (*volunteerR) NewStruct() *volunteerR {
	return &volunteerR{}
}

// volunteerL is where Load methods for each relationship are stored.
type volunteerL struct{}

var (
	volunteerAllColumns            = []string{"id", "name", "email", "phone", "password_hash", "type"}
	volunteerColumnsWithoutDefault = []string{"name", "email", "phone", "password_hash", "type"}
	volunteerColumnsWithDefault    = []string{"id"}
	volunteerPrimaryKeyColumns     = []string{"id"}
	volunteerGeneratedColumns      = []string{}
)

type (
	// VolunteerSlice is an alias for a slice of pointers to Volunteer.
	// This should almost always be used instead of []Volunteer.
	VolunteerSlice []*Volunteer
	// VolunteerHook is the signature for custom Volunteer hook methods
	VolunteerHook func(context.Context, boil.ContextExecutor, *Volunteer) error

	volunteerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	volunteerType                 = reflect.TypeOf(&Volunteer{})
	volunteerMapping              = queries.MakeStructMapping(volunteerType)
	volunteerPrimaryKeyMapping, _ = queries.BindMapping(volunteerType, volunteerMapping, volunteerPrimaryKeyColumns)
	volunteerInsertCacheMut       sync.RWMutex
	volunteerInsertCache          = make(map[string]insertCache)
	volunteerUpdateCacheMut       sync.RWMutex
	volunteerUpdateCache          = make(map[string]updateCache)
	volunteerUpsertCacheMut       sync.RWMutex
	volunteerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var volunteerAfterSelectMu sync.Mutex
var volunteerAfterSelectHooks []VolunteerHook

var volunteerBeforeInsertMu sync.Mutex
var volunteerBeforeInsertHooks []VolunteerHook
var volunteerAfterInsertMu sync.Mutex
var volunteerAfterInsertHooks []VolunteerHook

var volunteerBeforeUpdateMu sync.Mutex
var volunteerBeforeUpdateHooks []VolunteerHook
var volunteerAfterUpdateMu sync.Mutex
var volunteerAfterUpdateHooks []VolunteerHook

var volunteerBeforeDeleteMu sync.Mutex
var volunteerBeforeDeleteHooks []VolunteerHook
var volunteerAfterDeleteMu sync.Mutex
var volunteerAfterDeleteHooks []VolunteerHook

var volunteerBeforeUpsertMu sync.Mutex
var volunteerBeforeUpsertHooks []VolunteerHook
var volunteerAfterUpsertMu sync.Mutex
var volunteerAfterUpsertHooks []VolunteerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Volunteer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Volunteer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Volunteer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Volunteer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Volunteer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Volunteer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Volunteer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Volunteer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Volunteer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range volunteerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVolunteerHook registers your hook function for all future operations.
func AddVolunteerHook(hookPoint boil.HookPoint, volunteerHook VolunteerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		volunteerAfterSelectMu.Lock()
		volunteerAfterSelectHooks = append(volunteerAfterSelectHooks, volunteerHook)
		volunteerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		volunteerBeforeInsertMu.Lock()
		volunteerBeforeInsertHooks = append(volunteerBeforeInsertHooks, volunteerHook)
		volunteerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		volunteerAfterInsertMu.Lock()
		volunteerAfterInsertHooks = append(volunteerAfterInsertHooks, volunteerHook)
		volunteerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		volunteerBeforeUpdateMu.Lock()
		volunteerBeforeUpdateHooks = append(volunteerBeforeUpdateHooks, volunteerHook)
		volunteerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		volunteerAfterUpdateMu.Lock()
		volunteerAfterUpdateHooks = append(volunteerAfterUpdateHooks, volunteerHook)
		volunteerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		volunteerBeforeDeleteMu.Lock()
		volunteerBeforeDeleteHooks = append(volunteerBeforeDeleteHooks, volunteerHook)
		volunteerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		volunteerAfterDeleteMu.Lock()
		volunteerAfterDeleteHooks = append(volunteerAfterDeleteHooks, volunteerHook)
		volunteerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		volunteerBeforeUpsertMu.Lock()
		volunteerBeforeUpsertHooks = append(volunteerBeforeUpsertHooks, volunteerHook)
		volunteerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		volunteerAfterUpsertMu.Lock()
		volunteerAfterUpsertHooks = append(volunteerAfterUpsertHooks, volunteerHook)
		volunteerAfterUpsertMu.Unlock()
	}
}

// One returns a single volunteer record from the query.
func (q volunteerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Volunteer, error) {
	o := &Volunteer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for volunteer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Volunteer records from the query.
func (q volunteerQuery) All(ctx context.Context, exec boil.ContextExecutor) (VolunteerSlice, error) {
	var o []*Volunteer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Volunteer slice")
	}

	if len(volunteerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Volunteer records in the query.
func (q volunteerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count volunteer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q volunteerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if volunteer exists")
	}

	return count > 0, nil
}

// Volunteers retrieves all the records using an executor.
func Volunteers(mods ...qm.QueryMod) volunteerQuery {
	mods = append(mods, qm.From("\"volunteer\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"volunteer\".*"})
	}

	return volunteerQuery{q}
}

// FindVolunteer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVolunteer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Volunteer, error) {
	volunteerObj := &Volunteer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"volunteer\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, volunteerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from volunteer")
	}

	if err = volunteerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return volunteerObj, err
	}

	return volunteerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Volunteer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no volunteer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(volunteerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	volunteerInsertCacheMut.RLock()
	cache, cached := volunteerInsertCache[key]
	volunteerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			volunteerAllColumns,
			volunteerColumnsWithDefault,
			volunteerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(volunteerType, volunteerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(volunteerType, volunteerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"volunteer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"volunteer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into volunteer")
	}

	if !cached {
		volunteerInsertCacheMut.Lock()
		volunteerInsertCache[key] = cache
		volunteerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Volunteer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Volunteer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	volunteerUpdateCacheMut.RLock()
	cache, cached := volunteerUpdateCache[key]
	volunteerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			volunteerAllColumns,
			volunteerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update volunteer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"volunteer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, volunteerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(volunteerType, volunteerMapping, append(wl, volunteerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update volunteer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for volunteer")
	}

	if !cached {
		volunteerUpdateCacheMut.Lock()
		volunteerUpdateCache[key] = cache
		volunteerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q volunteerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for volunteer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for volunteer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VolunteerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volunteerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"volunteer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, volunteerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in volunteer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all volunteer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Volunteer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no volunteer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(volunteerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	volunteerUpsertCacheMut.RLock()
	cache, cached := volunteerUpsertCache[key]
	volunteerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			volunteerAllColumns,
			volunteerColumnsWithDefault,
			volunteerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			volunteerAllColumns,
			volunteerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert volunteer, could not build update column list")
		}

		ret := strmangle.SetComplement(volunteerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(volunteerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert volunteer, could not build conflict column list")
			}

			conflict = make([]string, len(volunteerPrimaryKeyColumns))
			copy(conflict, volunteerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"volunteer\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(volunteerType, volunteerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(volunteerType, volunteerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert volunteer")
	}

	if !cached {
		volunteerUpsertCacheMut.Lock()
		volunteerUpsertCache[key] = cache
		volunteerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Volunteer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Volunteer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Volunteer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), volunteerPrimaryKeyMapping)
	sql := "DELETE FROM \"volunteer\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from volunteer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for volunteer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q volunteerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no volunteerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from volunteer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for volunteer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VolunteerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(volunteerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volunteerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"volunteer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, volunteerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from volunteer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for volunteer")
	}

	if len(volunteerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Volunteer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVolunteer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VolunteerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VolunteerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volunteerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"volunteer\".* FROM \"volunteer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, volunteerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VolunteerSlice")
	}

	*o = slice

	return nil
}

// VolunteerExists checks if the Volunteer row exists.
func VolunteerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"volunteer\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if volunteer exists")
	}

	return exists, nil
}

// Exists checks if the Volunteer row exists.
func (o *Volunteer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VolunteerExists(ctx, exec, o.ID)
}
